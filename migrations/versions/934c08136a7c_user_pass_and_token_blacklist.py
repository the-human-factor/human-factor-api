"""user_pass_and_token_blacklist

Revision ID: 934c08136a7c
Revises: 889c40bcea6b
Create Date: 2019-07-25 21:38:00.604696

"""
from alembic import op
from flask_bcrypt import Bcrypt
import sqlalchemy as sa
from sqlalchemy.dialects.postgresql import UUID

# revision identifiers, used by Alembic.
revision = '934c08136a7c'
down_revision = '889c40bcea6b'
branch_labels = None
depends_on = None

bcrypt = Bcrypt()

usershelper = sa.Table(
  'users',
  sa.MetaData(),
  sa.Column('id', UUID(as_uuid=True), primary_key=True),
  sa.Column('name', sa.Unicode(length=255)),
  sa.Column('full_name', sa.Unicode(length=255)),
  sa.Column('password', sa.String(length=255))
)


def upgrade():
  connection = op.get_bind()

  # ### commands auto generated by Alembic - please adjust! ###
  op.create_table('blacklisted_tokens',
  sa.Column('jti', sa.String(length=64), nullable=False),
  sa.Column('exp', sa.DateTime(timezone=True), nullable=False),
  sa.PrimaryKeyConstraint('jti')
  )
  op.add_column('users', sa.Column('full_name', sa.Unicode(length=255), nullable=True))
  op.add_column('users', sa.Column('password', sa.String(length=255), nullable=True))

  # Copy names over
  for user in connection.execute(usershelper.select()):
    # Tmp password for existing users
    tmp_password = bcrypt.generate_password_hash('iamspecial').decode()

    connection.execute(
      usershelper.update().where(
        usershelper.c.id == user.id
      ).values(
        full_name=user.name,
        password=tmp_password
      )
    )

  op.alter_column('users', 'full_name', nullable=False)
  op.alter_column('users', 'password', nullable=False)
  op.drop_column('users', 'name')
  # ### end Alembic commands ###



def downgrade():
  # ### commands auto generated by Alembic - please adjust! ###
  op.add_column('users', sa.Column('name', sa.VARCHAR(length=255), autoincrement=False, nullable=True))
  op.drop_column('users', 'password')
  op.drop_column('users', 'full_name')
  op.drop_table('blacklisted_tokens')
  # ### end Alembic commands ###
